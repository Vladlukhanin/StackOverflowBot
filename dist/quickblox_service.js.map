{"version":3,"sources":["../src/quickblox_service.js"],"names":["QuickBloxService","constructor","params","quickblox","init","appId","authKey","authSecret","config","checkSession","callback","service","qbInst","session","Date","toISOString","sessionExpirationTime","createSession","login","botUser","password","error","console","log","buildMessage","feedEntry","title","link","fire","data","successCallback","errorCallback","self","err","chat","message","create","chat_dialog_id","chatDialogId","send_to_chat","res","JSON","stringify"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEe,MAAMA,gBAAN,CAAuB;AAClCC,kBAAc;AACV,aAAKC,MAAL,GAAc,iBAAOC,SAArB;;AAEA,4BAAGC,IAAH,CACI,KAAKF,MAAL,CAAYG,KADhB,EAEI,KAAKH,MAAL,CAAYI,OAFhB,EAGI,KAAKJ,MAAL,CAAYK,UAHhB,EAII,KAAKL,MAAL,CAAYM,MAJhB;AAMH;;AAEDC,iBAAaC,QAAb,EAAsB;AAClB,YAAI,CAAC,oBAAGC,OAAH,CAAWC,MAAX,CAAkBC,OAAnB,IAAgC,IAAIC,IAAJ,EAAD,CAAaC,WAAb,KAA6B,KAAKb,MAAL,CAAYc,qBAA5E,EAAmG;AAC/F,gCAAGC,aAAH,CAAiB;AACbC,uBAAO,KAAKhB,MAAL,CAAYiB,OAAZ,CAAoBD,KADd;AAEbE,0BAAU,KAAKlB,MAAL,CAAYiB,OAAZ,CAAoBC;AAFjB,aAAjB,EAGG,CAACC,KAAD,EAAQR,OAAR,KAAoB;AACnB,oBAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC;AAChCA,6BAASW,KAAT;AACAC,4BAAQC,GAAR,CAAYV,OAAZ;AACH;AACJ,aARD;AASH,SAVD,MAUO;AACH,gBAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAmC;AAC/BA,yBAAS,IAAT;AACH;AACJ;AACJ;;AAEDc,iBAAaC,SAAb,EAAwB;AACpB,eAAQ,iBAAgBA,UAAUC,KAAM,KAAID,UAAUE,IAAK,EAA3D,CADoB,CAC0C;AACjE;;AAEDC,SAAKC,IAAL,EAAWC,eAAX,EAA4BC,aAA5B,EAA2C;AACvC,YAAIC,OAAO,IAAX;;AAEAA,aAAKvB,YAAL,CAAkB,UAASwB,GAAT,EAAc;AAC5B,gCAAGC,IAAH,CAAQC,OAAR,CAAgBC,MAAhB,CAAuB;AACnBC,gCAAgBL,KAAK9B,MAAL,CAAYoC,YADT;AAEnBH,yBAASN,IAFU;AAGnBU,8BAAc;AAHK,aAAvB,EAIG,CAACN,GAAD,EAAMO,GAAN,KAAc;AACbR,qBAAKhB,qBAAL,GAA8B,IAAIF,IAAJ,EAAD,CAAaC,WAAb,EAA7B;;AAEA,oBAAIkB,GAAJ,EAAS;AACLX,4BAAQC,GAAR,CAAa,wCAAuCkB,KAAKC,SAAL,CAAeT,GAAf,CAAoB,EAAxE;AACAF,kCAAcE,GAAd;AACH,iBAHD,MAGO;AACHH,oCAAgBU,GAAhB;AACH;AACJ,aAbD;AAeH,SAhBD;AAiBH;AAtDiC;kBAAjBxC,gB","file":"quickblox_service.js","sourcesContent":["import QB from 'quickblox';\r\nimport CONFIG from '../config';\r\n\r\nexport default class QuickBloxService {\r\n    constructor() {\r\n        this.params = CONFIG.quickblox;\r\n\r\n        QB.init(\r\n            this.params.appId,\r\n            this.params.authKey,\r\n            this.params.authSecret,\r\n            this.params.config\r\n        );\r\n    }\r\n\r\n    checkSession(callback){\r\n        if (!QB.service.qbInst.session || ((new Date()).toISOString() > this.params.sessionExpirationTime)){\r\n            QB.createSession({\r\n                login: this.params.botUser.login,\r\n                password: this.params.botUser.password\r\n            }, (error, session) => {\r\n                if (typeof callback === 'function') {\r\n                    callback(error);\r\n                    console.log(session);\r\n                }\r\n            });\r\n        } else {\r\n            if (typeof callback === 'function'){\r\n                callback(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildMessage(feedEntry) {\r\n        return `New activity: ${feedEntry.title}. ${feedEntry.link}`; // feedEntry.categories.join(\", \")\r\n    }\r\n\r\n    fire(data, successCallback, errorCallback) {\r\n        let self = this;\r\n\r\n        self.checkSession(function(err) {\r\n            QB.chat.message.create({\r\n                chat_dialog_id: self.params.chatDialogId,\r\n                message: data,\r\n                send_to_chat: 1\r\n            }, (err, res) => {\r\n                self.sessionExpirationTime = (new Date()).toISOString();\r\n\r\n                if (err) {\r\n                    console.log(`error sending QuickBlox API request: ${JSON.stringify(err)}`);\r\n                    errorCallback(err);\r\n                } else {\r\n                    successCallback(res);\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n}\r\n"]}