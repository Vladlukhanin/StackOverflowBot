{"version":3,"sources":["../src/app.js"],"names":["stackoverflowFeedUrl","quickbloxAPI","App","constructor","self","CronJob","start","ex","console","log","stackoverflow","additionalTags","feedParser","parse","mainTag","entries","length","forEach","entry","i","arr","isNew","isNewEntry","isEntryHasNeededTags","date","title","message","buildMessage","fire","error","entryTimestamp","getTime","currentTimestamp","Date","now","categories","entryTag","j","tagToCheck"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,uBAAuB,qCAA7B;AACA,MAAMC,eAAe,iCAArB;;AAEA,MAAMC,GAAN,CAAU;AACNC,kBAAc;AACV,YAAIC,OAAO,IAAX;;AAEA,YAAI;AACA,gBAAI,eAAKC,OAAT,CAAiB,aAAjB,EAAgC,MAAM;AAClCD,qBAAKE,KAAL;AACH,aAFD,EAEG,IAFH,EAES,IAFT,EAEe,qBAFf;AAGH,SAJD,CAIE,OAAMC,EAAN,EAAU;AACRC,oBAAQC,GAAR,CAAa,2BAA0BF,EAAG,EAA1C;AACH;AACJ;;AAEDD,YAAQ;AACJ,YAAIF,OAAO,IAAX;;AAEAI,gBAAQC,GAAR,CAAY,eAAZ;AACAD,gBAAQC,GAAR,CAAY,iBAAOC,aAAP,CAAqBC,cAAjC;;AAEA,YAAIC,aAAa,kCAAjB;;AAEAA,mBAAWC,KAAX,CAAiBb,uBAAuB,iBAAOU,aAAP,CAAqBI,OAA7D,EAAsE,UAASC,OAAT,EAAiB;AAC/EP,oBAAQC,GAAR,CAAa,OAAMM,QAAQC,MAAO,UAAlC;;AAEAD,oBAAQE,OAAR,CAAgB,UAASC,KAAT,EAAgBC,CAAhB,EAAmBC,GAAnB,EAAwB;AACpC,oBAAIC,QAAQjB,KAAKkB,UAAL,CAAgBJ,KAAhB,CAAZ;;AAEA,oBAAIG,SAASjB,KAAKmB,oBAAL,CAA0BL,KAA1B,CAAb,EAA+C;AAC3CV,4BAAQC,GAAR,CAAa,0BAAyBS,MAAMM,IAAK,YAAWN,MAAMO,KAAM,EAAxE;;AAEA;AACA,wBAAIxB,YAAJ,EAAkB;AACd,4BAAIyB,UAAUzB,aAAa0B,YAAb,CAA0BT,KAA1B,CAAd;;AAEAjB,qCAAa2B,IAAb,CAAkBF,OAAlB,EACI,MAAM;AACFlB,oCAAQC,GAAR,CAAY,+CAAZ;AACH,yBAHL,EAGQoB,KAAD,IAAW;AACVrB,oCAAQqB,KAAR,CAAcA,KAAd;AACH,yBALL;AAOH;AAEJ;AACJ,aApBD;AAsBH,SAzBL,EAyBO,UAASA,KAAT,EAAgB;AACfrB,oBAAQqB,KAAR,CAAcA,KAAd;AACH,SA3BL;AA6BH;;AAEDP,eAAWJ,KAAX,EAAkB;AACd,YAAIY,iBAAiBZ,MAAMM,IAAN,CAAWO,OAAX,EAArB;AAAA,YACIC,mBAAmBC,KAAKC,GAAL,EADvB;;AAGA,eAAQF,mBAAmBF,cAApB,IAAwC,MAAM,IAArD;AACH;;AAEDP,yBAAqBL,KAArB,EAA4B;AACxB,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAAMiB,UAAN,CAAiBnB,MAArC,EAA6CG,GAA7C,EAAiD;AAC7C,gBAAIiB,WAAWlB,MAAMiB,UAAN,CAAiBhB,CAAjB,CAAf;;AAEA,iBAAI,IAAIkB,IAAI,CAAZ,EAAeA,IAAI,iBAAO3B,aAAP,CAAqBC,cAArB,CAAoCK,MAAvD,EAA+DqB,GAA/D,EAAmE;AAC/D,oBAAIC,aAAa,iBAAO5B,aAAP,CAAqBC,cAArB,CAAoC0B,CAApC,CAAjB;;AAEA,oBAAID,YAAYE,UAAhB,EAA4B;AACxB,2BAAO,IAAP;AACH;AACJ;AAEJ;;AAED,eAAO,KAAP;AACH;AA1EK;;AA6EV,IAAIpC,GAAJ","file":"app.js","sourcesContent":["import FeedparserService from './feedparser_service';\r\nimport QuickBloxService from './quickblox_service';\r\nimport CONFIG from '../config';\r\nimport Cron from 'cron';\r\n\r\nconst stackoverflowFeedUrl = \"http://stackoverflow.com/feeds/tag/\";\r\nconst quickbloxAPI = new QuickBloxService();\r\n\r\nclass App {\r\n    constructor() {\r\n        let self = this;\r\n\r\n        try {\r\n            new Cron.CronJob('*/5 * * * *', () => {\r\n                self.start();\r\n            }, null, true, 'America/Los_Angeles');\r\n        } catch(ex) {\r\n            console.log(`cron pattern not valid: ${ex}`);\r\n        }\r\n    }\r\n\r\n    start() {\r\n        let self = this;\r\n\r\n        console.log('start by cron');\r\n        console.log(CONFIG.stackoverflow.additionalTags);\r\n\r\n        let feedParser = new FeedparserService();\r\n\r\n        feedParser.parse(stackoverflowFeedUrl + CONFIG.stackoverflow.mainTag, function(entries){\r\n                console.log(`got ${entries.length} entries`);\r\n\r\n                entries.forEach(function(entry, i, arr) {\r\n                    let isNew = self.isNewEntry(entry);\r\n\r\n                    if (isNew && self.isEntryHasNeededTags(entry)) {\r\n                        console.log(`New Entry found. Date: ${entry.date}. Title: ${entry.title}`);\r\n\r\n                        // notify QuickBlox\r\n                        if (quickbloxAPI) {\r\n                            let message = quickbloxAPI.buildMessage(entry);\r\n\r\n                            quickbloxAPI.fire(message,\r\n                                () => {\r\n                                    console.log('Message has pushed to QuickBlox successfully.');\r\n                                }, (error) => {\r\n                                    console.error(error);\r\n                                }\r\n                            );\r\n                        }\r\n\r\n                    }\r\n                });\r\n\r\n            }, function(error) {\r\n                console.error(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    isNewEntry(entry) {\r\n        let entryTimestamp = entry.date.getTime(),\r\n            currentTimestamp = Date.now();\r\n\r\n        return (currentTimestamp - entryTimestamp) <= (300 * 1000);\r\n    }\r\n\r\n    isEntryHasNeededTags(entry) {\r\n        for (let i = 0; i < entry.categories.length; i++){\r\n            let entryTag = entry.categories[i];\r\n\r\n            for(let j = 0; j < CONFIG.stackoverflow.additionalTags.length; j++){\r\n                let tagToCheck = CONFIG.stackoverflow.additionalTags[j];\r\n\r\n                if (entryTag == tagToCheck) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nnew App();\r\n"]}