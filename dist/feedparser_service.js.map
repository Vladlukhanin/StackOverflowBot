{"version":3,"sources":["../src/feedparser_service.js"],"names":["FeedparserService","constructor","items","parse","url","successCallback","errorCallback","self","console","log","req","headers","uri","feedparser","on","error","res","stream","statusCode","statusMessage","emit","Error","pipe","meta","item","read","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEe,MAAMA,iBAAN,CAAwB;AACnCC,kBAAc;AACV,aAAKC,KAAL,GAAa,EAAb;AACH;;AAEDC,UAAMC,GAAN,EAAWC,eAAX,EAA4BC,aAA5B,EAA2C;AACvC,YAAIC,OAAO,IAAX;;AAEAC,gBAAQC,GAAR,CAAa,gBAAeL,GAAI,EAAhC;;AAEA,YAAIM,MAAM,uBAAQ;AACVC,qBAAS,EAAE,cAAc,SAAhB,EADC;AAEVC,iBAAKR;AAFK,SAAR,CAAV;;AAKA,YAAIS,aAAa,yBAAe,EAAf,CAAjB;;AAEAH,YAAII,EAAJ,CAAO,OAAP,EAAiBC,KAAD,IAAW;AACvBT,0BAAcS,KAAd;AACH,SAFD;;AAIAL,YAAII,EAAJ,CAAO,UAAP,EAAoBE,GAAD,IAAS;AACxB,gBAAIC,SAASD,GAAb;;AAEAR,oBAAQC,GAAR,CAAY,qBAAqBO,IAAIE,UAArC;AACAV,oBAAQC,GAAR,CAAY,wBAAwBO,IAAIG,aAAxC;;AAEA,gBAAIH,IAAIE,UAAJ,KAAmB,GAAvB,EAA4B;AACxB,uBAAO,KAAKE,IAAL,CAAU,OAAV,EAAmB,IAAIC,KAAJ,CAAUL,IAAIE,UAAJ,GAAiB,GAAjB,GAAuBF,IAAIG,aAArC,CAAnB,CAAP;AACH;;AAEDF,mBAAOK,IAAP,CAAYT,UAAZ;AACH,SAXD;;AAaAA,mBAAWC,EAAX,CAAc,OAAd,EAAwBC,KAAD,IAAW;AAC9BT,0BAAcS,KAAd;AACH,SAFD;;AAIAF,mBAAWC,EAAX,CAAc,UAAd,EAA0B,MAAM;AAC5B;AACA,gBAAIG,SAASJ,UAAb;AAAA,gBACIU,OAAON,OAAOM,IADlB;AAAA,gBACwB;AACpBC,gBAFJ;;AAIA,mBAAOA,OAAOP,OAAOQ,IAAP,EAAd,EAA6B;AACzBlB,qBAAKL,KAAL,CAAWwB,IAAX,CAAgBF,IAAhB;AACH;AACJ,SATD;;AAWAX,mBAAWC,EAAX,CAAc,KAAd,EAAsBC,KAAD,IAAW;AAC5BV,4BAAgBE,KAAKL,KAArB;AACH,SAFD;AAGH;AApDkC;kBAAlBF,iB","file":"feedparser_service.js","sourcesContent":["import FeedParser from 'feedparser';\r\nimport request from 'request';\r\n\r\nexport default class FeedparserService {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    parse(url, successCallback, errorCallback) {\r\n        let self = this;\r\n\r\n        console.log(`quering url: ${url}`);\r\n\r\n        let req = request({\r\n                headers: { \"user-agent\": \"node.js\" },\r\n                uri: url\r\n            });\r\n\r\n        let feedparser = new FeedParser([]);\r\n\r\n        req.on('error', (error) => {\r\n            errorCallback(error);\r\n        });\r\n\r\n        req.on('response', (res) => {\r\n            let stream = res;\r\n\r\n            console.log(\"res.statusCode: \" + res.statusCode);\r\n            console.log(\"res.statusMessage: \" + res.statusMessage);\r\n\r\n            if (res.statusCode !== 200) {\r\n                return this.emit('error', new Error(res.statusCode + \" \" + res.statusMessage));\r\n            }\r\n\r\n            stream.pipe(feedparser);\r\n        });\r\n\r\n        feedparser.on('error', (error) => {\r\n            errorCallback(error);\r\n        });\r\n\r\n        feedparser.on('readable', () => {\r\n            // This is where the action is!\r\n            let stream = feedparser,\r\n                meta = stream.meta, // **NOTE** the \"meta\" is always available in the context of the feedparser instance\r\n                item;\r\n\r\n            while (item = stream.read()) {\r\n                self.items.push(item);\r\n            }\r\n        });\r\n\r\n        feedparser.on('end', (error) => {\r\n            successCallback(self.items);\r\n        });\r\n    }\r\n}\r\n"]}